zh-CN:
  about:
    our_vision: 我们的愿景
    our_vision_desc1: 通过<s>{{v}}</s>，我们帮助需要对社区进行数据分析的人。包括但不限于 OSPOs、社区管理人员、学术研究人员、项目所有者、维护者、开发者等。
    our_vision_desc2: 通过分析大量开源项目的实际数据，并参照行业最佳实践和学术界的研究结果，我们创建一个开源社区<m>{{e}}</m>，加以不断改进和优化，并通过<s>{{v}}</s>反哺到开源社区。
    ecosystem_evaluation_system: 生态体系评估系统
    communication: 交流
    communication_desc: 我们有多种沟通渠道，如即时通讯群、Issues 等。你可以访问<l>{{v}}</l>进行了解。
    this_page: 这个页面
    acknowledgements: 致谢
    acknowledgements_desc: 开源指南针遵循 CHAOSS 项目的最佳实践，包括度量模型和度量标准，其中部分后端组件最初来自 Grimoirebs。我们衷心感谢
      <l>{{v}}</l>。
    chaoss_community: CHAOSS 社区
    governing_board: Board 成员
    welcome_to_the_oss_compass_community: 欢迎来到开源指南针社区！
    we_provide_a_public_saas_platform_oss_compass_for: 我们提供了一个公开的 SaaS 服务 “开源指南针”，用于开源社区健康分析，面向
      Github、Gitee 等托管平台上托管的所有开源项目开放。
    members: 成员单位
    platinum_members: 白金成员
    community_members: 社区成员
    partners: 伙伴成员
    technical_committee: 技术委员会
    outreach_committee: 外联委员会
    assessment_model_working_group: 评估模型工作组
    saas_working_group: SaaS 工作组
    organization_member: 组织成员
    individual_members: 个人成员
  academe:
    academic_research_cooperation: Compass 协作
    academic_research_desc: 通过Compass协作，我们建立产学研合作桥梁，推广学术成果与开源最佳实践，提升开源协作效率
    submit_your_application_now: 联系我们
    cooperation_case: 合作案例
    cooperation_process: 合作流程
    submit_application: 提交合作申请
    affirm: OSS Compass 确认
    conduct_joint_research: 展开联合研究
    experiment_verify: 实验验证
    release_results: 成果发布
    submit_application_desc1: 如果您所在的科研机构和社区有意与 OSS Compass 开展学术研究或方案推广，欢迎通过网站提交相关合作意向。
    submit_application_desc2: 合作领域包括但不限于以下几个方面：
    submit_application_desc3: 开源社区与软件评估方案
    submit_application_desc4: 开源社区治理与运营方案
    submit_application_desc7: 提交合作意向请提供您和您的团队信息，已有研究沉淀或成果简述，以及您意向与我们展开研究合作的内容领域。
    affirm_desc: 我们的团队会对收到的合作申请进行评估和确认。一旦申请被接受，我们将与合作机构通过电子邮件或其他适合的沟通方式进行进一步的沟通和详细讨论。
    conduct_joint_research_desc: 在确定合作细节和目标之后，双方将正式展开联合研究。 OSS Compass 将为您提供相关领域研究的基础数据集，共同制定研究计划，并展开一系列的学术研讨和共同研究。
    verify_desc: 当双方的联合研究进行到一定程度并取得进展，我们将会与您共同尝试，将进展成果尝试物化为开源社区参考的数据指标、度量工具或分析模型能力，通过
      OSS Compass 社区和平台，面向开源社区提供体验服务，用于验证研究成果，以确保研究的可靠性和可行性，并进一步推动开源软件度量和生态评估领域的发展。
    release_desc1: 一旦联合研究完成并达到预期目标，OSS Compass将与您共同对研究成果进行整理、归纳和总结，以便于更广泛的分享和传播。成果发布可以采用多种形式，包括但不仅限于：
    release_desc2: 通过 OSS Compass 提供度量工具或分析模型能力
    release_desc3: 联合发布研究报告、论文发表、技术指南等。
    discuss_the_evolution: OSS Compass社区与产学研各界共同探讨和推进开源协作
    author: 作者：
    nju_title: 基于OSS Compass指标预测开源项目活跃度
    nju_author: 作者：刘政、祖小岚、罗星宇、王子杭，南京大学本科生；张洁芮，南京大学博士研究生。南京大学计算机科学与技术系--软件新技术全国重点实验室、OSS
      Compass社区。
    nju_author2: 导师：汪亮、陶先平、王晔晖
    nju_desc: 简介：南京大学2024年大学生创新训练计划《基于度量指标的开源软件项目健康度预测技术研究》。参考文章：
    nju_desc2: 本方法基于OSS Compass指标预测开源项目的未来活跃状态。该方法采用了基于特征的时间序列分类预测方法，通过提取OSS Compass指标序列中的统计特征，训练并运用机器学习智能分类模型对项目未来的活跃/不活跃状态进行预测，同时给出近似概率估计。在近600个项目数据集上的交叉验证结果显示，该方法的准确率接近90%。在泛化能力方面，本方法在超过一万个仓库的数据集上仍能够达到80%的准确率，初步具备现实可用性。分析结果能够部分反映开源项目的未来健康状态，进而展示了OSS
      Compass指标体系在度量开源软件健康度上的有效性。该方法有望为开源软件的用户、开发者、投资者和管理者提供有价值的参考信息。
    nju2_title: 基于信息熵的开源社区演化行为度量方法
    nju2_author: 作者：张洁芮，李颖。南京大学计算机科学与技术系--软件新技术全国重点实验室、OSS Compass社区。
    nju2_author2: 导师：汪亮、陶先平
    nju2_desc: 简介：本研究针对开源开发者社交网络中的演化行为认知这一主题，为克服传统社区演化行为分析技术偏重定性而非定量这一局限性，提出了一组基于信息熵的社区分裂、缩减、合并和扩大指数来度量开源开发者社交网络中的社区演化行为。实证研究表明，该组指数能够有效刻画开源社区的演化，通过简单的规则变化能够取得和现有定性工作相一致的结论，准确率达到
      94.1%。同时，进一步的研究表明，所提出的社区演化指数与开源项目以 commit 数量为代表的生产力之间存在显著的关联关系。本研究所提出的基于信息熵的度量指数为我们定量认知和分析开源社区的演化行为提供了支持。参考文章：
    nju3_title: 基于熵的开源软件Fork副本多样性度量方法
    nju3_author: 作者：郑智文、吴向臣、桑百惠、张洁芮。南京大学计算机科学与技术系--软件新技术全国重点实验室、OSS Compass社区。
    nju3_author2: 导师：汪亮、陶先平
    nju3_desc: 简介：本研究聚焦于开源软件（OSS）平台上的项目副本，围绕衡量和理解开源软件项目中副本多样性展开。本文通过构造基于 Rao 二次熵的新型副本熵，并基于项目文件的修改来衡量这种多样性。实证研究表明，开源项目的副本熵与不同的主效应之间存在显著相关性，其中包括项目的外部生产力（由外部贡献者的提交数量度量）、外部贡献者
      pull-request 的接受率以及已报告的 bug 数量。此外，我们还观察到副本熵与其他因素（如副本数量）之间存在显著的交互作用。这些结果表明，副本熵作为一个有效指标，不仅丰富了当前关于开源软件项目副本的可用度量，还进一步加深了基于副本仓库开源软件发展过程的认识，并且有望支持进一步的研究和应用。参考文章：
    pku1_title: 新手任务的智能推荐：GFI-Bot
    pku1_author: 作者：肖文鑫，北京大学博士研究生
    pku1_author2: 导师：周明辉教授
    pku1_desc1: 简介：在GitHub平台上，众多项目运用了“标签”机制，将适合新手解决的问题标记为'good first issue'（以下简称为GFI），以此引导新手通过处理这些初级任务，完成对项目的首次贡献。Tan等人的研究发现，这种机制的受欢迎程度正在逐步上升。然而，在大部分项目中，被标记为GFI的问题所占比例相对较低。更加令人疑虑的是，GFI问题的解决状况并不乐观。在所有的GFI问题中，仅有大约60%的问题被新手成功解决，而大量的GFI问题仍然未被解决。在GitHub这样的平台上，每个Issue不仅包含标题和描述，还融合了标签、评论等多元化的特征。因此，Xiao等人提出了一种基于任务多元特征的新手任务自动标记方法，分别在Issue的开放时刻和解决时刻两个时间点，通过XGBoost分类器，对新手解决的问题和其他问题进行分类。
    pku1_desc2: 项目地址：
    pku2_title: 库迁移的智能推荐：MigrationAdvisor
    pku2_author: 作者：谷海桥、何昊、赵益良，北京大学博士研究生
    pku2_author2: 导师：周明辉教授、王怀民院士
    pku2_desc1: 简介：随着开源软件（OSS）的兴起和软件包托管平台的发展，越来越多的开发者选择重用现有的第三方库进行项目开发，从而降低开发成本，提高开发效率。然而，在重用第三方库的过程中，当开发者无法通过升降级来解决库中存在的问题，如安全漏洞、兼容性等，就需要用另一个功能相同或相似的第三方库来代替，这种操作被称为库迁移。但由于现有信息有限，开发者在进行替换库的选择时，往往基于主观意见并非最佳选择。通过对历史开发活动进行分析，并利用多个指标对库迁移进行排序，可以推荐最适合的库迁移方案。首先从大量的软件仓库中挖掘迁移历史，构建迁移知识库；给定一个需要迁移的库后，筛选出候选的目标库，然后通过结合相关指标来对它们进行排序，这些指标从开发历史的不同维度捕获证据：规则支持、原因支持、距离支持和API支持；通过对大量GitHub仓库的智能分析，能够推荐出库迁移的目标。
    pku2_desc2: 项目地址：
    pku3_title: '开源软件许可证推荐工具: LicenseRec'
    pku3_author: 作者：徐卫伟，北京大学博士研究生
    pku3_author2: 导师：周明辉教授
    pku3_desc1: 简介：面对开发者在面对大量相似的许可证和复杂的法律条款时，如何选择适合自身项目的开源许可证的问题，Xu等人提出了开源软件许可证推荐工具LicenseRec，旨在帮助创新之处在于，在遵从项目中第三方组件许可证的基础上，从开源风格、商业需求以及社区发展三个方面推荐满足用户偏好的许可证。为了实现这一目标，构建了一个包含常见许可证条款特征、兼容性信息和许可证选择指南的知识库。工作流程包括：扫描第三方组件的许可证、检查许可证的兼容性、通过用户交互来刻画用户的偏好。然后，根据这些信息，推荐出最适合的许可证。该工具可以进行第三方组件许可证的扫描和兼容性检查，同时也能刻画用户的偏好，从而推荐出最符合用户需求的许可证。
    pku3_desc2: 工具链接：
    pku3_desc3: 项目地址：
    openeuler_title: openEuler 文档模拟伴读
    openeuler_author: 作者：openEuler社区
    openeuler_desc1: 简介：文档模拟伴读方案由 openEuler 社区设计并推广，用户在不中断阅读体验的前提下，帮助社区不断改进和完善文档，提升文档质量和用户体验。
    openeuler_desc2: 项目地址：
    experience_immediately: 立即体验
    experience: 效果体验
    calculate: 计算
    type_address_of: 请输入仓库地址
    please_enter_a_valid: 请输入合法 url
    failed_to_fetch_data: 获取数据失败 !
    result: 计算结果：
  analysis:
    task:
      submitted: 任务已经提交
      pending: 该提交需求已进入分析服务队列，我们​​会在分析完成后在此 Pull Request 下同步的分析报告地址
      unsubmit: 任务提交失败；系统正忙，请稍后重试
    validation:
      pass: 感谢您的提交，我们将在 Pull Request 合并后分析项目信息，您可以持续关注此 Pull Request 的进展
      missing: 缺少 `%{field}` 字段
      not_support: 目前暂未支持来自 %{source} 的数据收集
      no_tasks: 未配置有效任务
      cannot_access: 尝试访问该仓库失败
      cannot_access_with_tip: 尝试访问该仓库失败；系统正忙，请稍后重试
  analyze:
    overview: 概览
    repos: 个仓库
    repositories: 仓库 ({{count}})
    topic:
      productivity: 生产力
      robustness: 稳健性
      niche_creation: 创新力
    all_model:
      collaboration_development_index: 协作开发指数
      community_service_and_support: 社区服务与支撑
      community_activity: 活跃度
      organization_activity: 组织活跃度
      contributors_domain_persona: 贡献领域画像
      contributors_role_persona: 贡献角色画像
      contributors_milestone_persona: 贡献里程画像
      contributor_route: 贡献者旅程
      contributor_reputation: 贡献口碑
      user_reputation: 用户口碑
      software_quality: 软件质量
      software_usage_quality: 软件使用质量
      document_quality: 文档质量
      northbound_adoption: 北向采用
      south_fit: 南向适配
      security: 安全
      compliance: 合规
    distribution_map: 分布图
    confirm: 确定
    custom: 自定义
    display: 图表显示
    compare: 对比
    search_repo_input_placeholder: 请输入仓库名
    search_community_input_placeholder: 请输入社区名
    explore_other_projects: 探索其他项目
    the_current_project_is_under_analysis_please_visit: 正在分析中，请稍后访问...
    subscribe: 订阅
    subscribed: 已订阅
    score_conversion:
      on_point: "[0, 1]: 模型的绝对分值"
      hundred_mark: "[0, 100]: 基于[0, 1]的分布结果"
    median: 中位数
    average: 平均数
    avg_line:
      show: 显示平均数
      hide: 隐藏平均数
    median_line:
      show: 显示中位数
      hide: 隐藏中位数
    y_axis_scale: Y 轴缩放
    unit_label: '单位: {{unit}}'
    unit_day: 天
    positive_indicators: 正向化指标
    negative_indicators: 负向化指标
    full_screen: 全屏
    full_screen_exit: 退出全屏
    download_chart_img: 下载与分享
    download: 下载
    file_format: 文件格式
    total: 总共
    code_reviewer: 代码审查者
    pr_creator: PR 提交者
    commit_author: 代码提交者
    commit_pr_linked_ratio: 代码提交关联 PR 的比率
    commit_pr: 代码提交
    commit_pr_linked: 代码提交关联 PR
    linked_issue_ratio: 关联 Issue 比率
    total_pr: PR 总数
    linked_issue: 关联 Issue 总数
    lines_add: 增加行数
    lines_remove: 删减行数
    code_review_ratio: 代码审查比率
    code_review: 代码审查总数
    code_merge_ratio: 代码合并比率
    code_merge: 代码合并
    mark:
      point: 一分制
      percentage: 百分制
    updated_on: 更新于
    there_is_currently_no_data_in_the_chart: 图表暂无数据，
    please_contact_us_if_you_have: 如果你有任何问题，请<l>{{e}}</l>。
    contact_us: 联系我们
    repos_type:
      all: 全部
      governance_repository: 治理仓
      software_artifact_repository: 软件制品仓
    repo_filter: 仓库筛选
    ratio: 比率
    closed: 已关闭
    created: 已创建
    doc_popper:
      definition: 定义
      weight: 权重
      threshold: 阈值
      notes: 注
    badge:
      text: 徽章
      title: Compass 徽章
    function_menu: 功能
    collaboration: 协作
    contributor: 贡献者
    software: 软件
    coming_soon: 即将上线
    metric_detail:
      details: 查看洞察详情
      contributors_persona: 贡献者画像
      org_count: 贡献组织数量
      top_contributing_org: Top贡献组织
      contributor_count: 贡献者数量
      top_contributor: Top贡献者
      issues: Issue
      newly_created_issues: 新建issue数量
      issue_completion_rate: Issue解决百分比
      unanswered_issue_count: 未响应Issues数量
      average_comments_count: 平均评论数量
      pull_requests: Pull Request
      newly_created_pr_count: 新建PR数量
      pr_completion_rate: PR解决百分比
      unanswered_pr_count: 未响应PR数量
      commit_count: 代码提交数量
      project_deep_dive_insight: 项目深度洞察
      milestone_persona_filter: 里程画像
      core: 核心贡献者
      regular: 常客贡献者
      guest: 访客贡献者
      core_desc: 本时间段所有贡献（不包含star、fork的贡献）的5成，由最少的一组人完成，这组人被称为核心贡献者
      regular_desc: 抛去头部5成贡献，接下来的3成贡献，包含在github上issue、pr贡献，在twitter、slack、discourse留言。不包含star、fork的贡献
      guest_desc: 常客、核心以外的贡献者(包括观察贡献者)
      persona_detail: 画像详情
      contribution: 贡献次数
      contribution_distribution: 贡献次数分布
      global_contribution_distribution: 全局贡献次数分布
      organization_contribution_distribution: 组织贡献次数分布
      organization: 组织
      milestone_persona: 里程画像
      role_persona: 角色画像
      domain_persona: 领域画像
      contributor: 贡献者
      contributor_distribution: 贡献者分布
      organization_participant: 组织参与者
      organization_manager: 组织管理者
      individual_manager: 个人管理者
      individual_participant: 个人参与者
      individual: 个人
      participant: 参与者
      manager: 管理者
      contributor_unit: 人
      contribution_unit: 次
      observe:
        fork: fork贡献
        star: star贡献
      issue:
        issue_creation: issue创建
        issue_comments: issue评论
      issue_admin:
        issue_labeled: issue添加标签
        issue_unlabeled: issue移除标签
        issue_closed: issue关闭
        issue_reopened: issue重新打开
        issue_assigned: issue分配责任人
        issue_unassigned: issue取消责任人
        issue_milestoned: issue设置里程碑
        issue_demilestoned: issue取消里程碑
        issue_marked_as_duplicate: issue标记重复
        issue_transferred: issue迁移
        issue_renamed_title: issue重命名标题
        issue_change_description: issue更改描述
        issue_setting_priority: issue设置优先级
        issue_change_priority: issue修改优先级
        issue_link_pull_request: issue链接pr
        issue_unlink_pull_request: issue取消链接pr
        issue_assign_collaborator: " issue添加协作者"
        issue_unassign_collaborator: issue取消协作者
        issue_change_issue_state: issue修改状态
        issue_change_issue_type: issue修改类型
        issue_setting_branch: issue设置分支
        issue_change_branch: issue取消分支
      code:
        pr_creation: PR创建
        pr_comments: PR评论
        code_commit: 代码提交
      code_admin:
        pr_labeled: PR添加标签
        pr_unlabeled: PR取消标签
        pr_closed: PR关闭
        pr_assigned: PR分配责任人
        pr_unassigned: PR取消责任人
        pr_reopened: PR重新打开
        pr_milestoned: PR设置里程碑
        pr_demilestoned: PR取消里程碑
        pr_marked_as_duplicate: PR标记重复
        pr_transferred: PR迁移
        pr_renamed_title: PR重命名标题
        pr_change_description: PR更改描述
        pr_setting_priority: PR设置优先级
        pr_change_priority: PR修改优先级
        pr_merged: PR合并
        pr_review: PR审查
        pr_set_tester: PR设置测试人
        pr_unset_tester: PR取消测试人
        pr_check_pass: PR审查通过
        pr_test_pass: PR测试通过
        pr_reset_assign_result: PR取消审查结果
        pr_reset_test_result: PR取消测试结果
        pr_link_issue: PR链接issue
        pr_unlink_issue: PR取消链接issue
        code_direct_commit: code直接提交
      issue_detail: Issue详情
      pr_detail: PR详情
      issue_completion: Issue解决百分比
      issues_comments: Issues评论
      pr_completion: PR解决百分比
      pr_comments: PR评论
      issue_title: Issue标题
      state: 状态
      created_time: 创建时间
      close_time: 关闭时间
      processing_time: 处理时长(天)
      first_response_time: 首次响应时长(天)
      comments_count: 评论数量
      tags: 标签
      creator: 创建者
      assignee: 责任人
      pr_title: PR标题
      reviewer: 审查者
      merge_author: 合并者
      closed: 关闭
      open: 打开
      progressing: 进行中
      rejected: 已关闭
      merged: 已合并
      comments: 条评论
      show_organization: 展示组织
      only_manager_participant: 只看管理者参与者
      only_individual_organization: 只看组织个人
    only_the_latest_month: 最近一年没有对该项目有Admin操作的账号用户(lssue分配、PR合并等)仅可查看最近一个月的数据
    for_more_time_frames: 如需查看更多时间范围，请
    statistics: 统计中
    total_people: 总共 {{total}} 人
    total_issues: 总共 {{total}} Issues
    total_prs: 总共 {{total}} PR
  auth:
    email_verification_successful: 邮件验证成功
    email_verification_expired: 邮箱验证已过期
    the_email_address: 已成功将邮箱地址
    has_been_successfully: 与您的 OSS Compass 帐户绑定
    resend_email: 请前往账号设置页面，重新发送验证邮件
    account_setting: 账号设置
    auth_failed: 登录失败
  basic:
    too_long: 请求参数过长，限制为：%{long}
    invalid_range: 请求参数 %{param} 范围无效, 有效范围为 %{min} ~ %{max}
    subject_not_exist: 操作对象不存在
  censoring:
    illegal: "[违规内容，不予展示]"
    illegal_img: "/images/illegal.svg"
  collection:
    more_repositories: 更多仓库
    recently_hottest: 近期热门
    repositories: "{{length}} 个仓库"
    collections: 分类
    please_select_two_or_more_repositories_below: 请选择以下两个或多个仓库
    cancel: 取消
    compare: 对比
    pick_for_compare: 勾选对比
  common:
    oss_compass: 开源指南针
    header:
      home: 首页
      explore: 探索
      projects: 项目
      docs: 文档
      metrics_models: 评估模型
      community: 社区
      blog: 博客
      news: 动态
      lab: 实验室
      academe: 协作
      about: 关于
      submit_your_project: 提交项目
    range:
      1M: 最近1个月
      3M: 最近3个月
      6M: 最近6个月
      1Y: 最近1年
      2Y: 最近2年
      3Y: 最近3年
      5Y: 最近5年
      Since2000: 创立以来
    community:
      code_base: 代码仓库
      discussion: 讨论
      slack: Slack
      join_slack: 加入 Slack 频道
      wechat: 微信
      join_wechat: 加入微信群
      github: GitHub
      official_repository_on_github: 官方 GitHub 仓库
      gitee: Gitee
      official_repository_on_gitee: 官方 Gitee 仓库
      meeting: 腾讯会议
      join_meeting: 技术研讨周会
    footer:
      tutorial: 文档教程
      quick_start: 快速起步
      dimensions_define: 度量维度定义
      legal: 法律合规
      terms: 使用条款
      privacy: 隐私政策
      built_with: Built With
      community: 社区交流
      slack: Slack 频道
      wechat: 微信交流群
      code: 开源代码
    error:
      url_404: 你访问的页面不存在
      invalid_url_query: 非法参数链接
      something_went_wrong: '出错了:'
      try_to_refresh_this_page_or_feel_free_to_contact_u: 请刷新此页，如果问题仍然存在，请随时与我们联系.
      try_again: 再试一次
      oops: "<s> Oops! </s> {{message}}"
    search:
      no_result: 未找到相关内容
    topic:
      productivity: 生产力
      robustness: 稳健性
      niche_creation: 创新力
    no_data: 暂无数据
    next: 下一个
    know_more: 了解更多
    ago: 前
    signin: 登录
    subscribe: 我的订阅
    profile_setting: 账号设置
    my_models: 我的模型
    signout: 退出
    btn:
      back: 返回
      confirm: 确认
      save: 保存
      delete: 删除
      edit: 编辑
      cancel: 取消
      func_disabled: 该功能临时关闭
    prompt:
      please_enter: 请输入
    confirm:
      delete: 确定删除吗？
    toast:
      modification_successful: 修改成功
      modification_failed: 修改失败
    loading: 加载中...
    loading_more: 加载更多...
    load_more: 点击加载更多
    nothing_more_to_load: 无更多数据了
    copy:
      click_to_copy: 点击复制
      copy_successfully: 复制成功
    contact_us: 通过<s>社区</s>联系我们。
    powered_by_chaoss: Powered by CHAOSS
  contributor_orgs:
    range_invalid: last_date 必须在 first_date 之后
    range_overlap: 组织之间的日期范围不能重叠
  dispatch:
    project:
      no_exists: 该项目 %{project_name} 不存在对应的任务
      invalid: '无效的项目: %{project_name}'
      processed: 您提交的请求正在处理中
  home:
    projects: Projects
    dimensions: Dimensions
    models: Models
    metrics: Metrics
    activity: 活跃度
    how_compass_working: How Compass working
    it_points_to_the_thing_you_want_most_in_open_source: 估量有尺 开源有道
    we_help_open_source_projects_gain_insight_into_its: 全面的开源生态评估体系和易用的SaaS平台。
    type_the_name_to_insight_into_your_project: 请输入 GitHub/Gitee 仓库名称或社区名称
    please_enter_repository_name_or_community: ''
    a_special_thank_you: 致谢…
    oss_compass_follows_the_best_practices_and_specifi: 开源指南针遵循 CHAOSS 项目的最佳实践，包括度量模型和度量标准，其中部分后端组件最初来自
      Grimoirelabs。我们衷心感谢 CHAOSS 社区。
    submit_your_project: 提交项目
    community: 社区
    compass_report: 查看报告
    nothing_about_yet: 未找到与 <s> {{expr}} </s> 匹配的结果.
    cant_find_the_right_option: 未找到想要的结果？
    oss_eco_evaluation_system: 开源生态评估体系
    facts: Facts
    recently: 最近更新
    trends: 活跃度趋势
    coming_soon: 即将推出
    hot_fields: 热门领域
    hot_fields_content:
      artificial_intelligence: 人工智能
      server_os: 大数据
      database: 数据库
      machine_learning_framework: 深度学习框架
      intelligent_terminal_distributed_os: Web
      relational_db: 关系型数据库
      document_db: 文档数据库
      time_series_db: 时序数据库
      graph_db: 图数据库
      big_data_framework: 大数据框架
      web_framework: Web框架
    trending:
      repository_weekly_activity_board: 仓库活跃度周榜
      community_weekly_activity_board: 社区活跃度周榜
    hot_projects: 热门项目
    hot_collection: 热门分类
    more: 更多
    repositories: "{{length}} 个仓库"
    the_latest_from: 最新动态
    announcement: 公告
    report: 新闻
    event: 事件
    blog: 博客
    read_more: 阅读更多
    scan_the_code_to_follow: 扫码关注微信公众号
    open_source_manage: 开源治理
    open_source_manage_desc: 为开源社区[管理人员、项目所有者、维护者、开发者]进行开放治理提供完善的评估体系、可靠的数据和技术服务支持，提高社区效能，推动社区的健康发展。
    data_decision: 数据决策
    data_decision_desc: 为组织、OSPOs 和创投机构提供深入的数据分析和项目洞察，帮助制定决策、优化资源分配以及挖掘高潜力开源项目。
    academic_research: 学术研究
    academic_research_desc: 为学术研究人员提供开源社区生态体系数据和分析，促进有关开源治理、开源软件使用的研究，同时提供学术成果转化的工程能力与具体实践。
    more_about_the_evaluation_system: 详细了解评估体系
  lab:
    back_my_lab: 返回我的模型
    the_locale_names_are_used_for: Compass Lab is a sandbox that helps people quickly
      create and validate metrics models of their interest, which can be used for
      proprietary domain evaluations or as general models. It provides over 20,000
      open-source project datasets from over 200 categories, 100+ CHAOSS metrics,
      and custom algorithms to promote continuous innovation in modeling.
    discuss: 讨论
    create_a_model: 创建一个模型
    pick_for_compare: 勾选对比
    datasets: 数据集
    metrics: 指标
    algorithm: 算法
    projects_in_datasets: 数据集中的 {{length}} 个项目在使用这个模型
    create_your_own_model_in_5_minutes: 在5分钟内创建一个您自己的模型
    create_a_model_now: 开始创建一个模型
    select_dataset: 选择数据集
    covering_datasets: 覆盖各领域各行业 200+ 数据集
    select_metrics: 选择度量指标
    metrics_in_three_dimensions: 来源于CHAOSS的 100+ 度量指标
    select_algorithm: 选择算法
    support_AHP: 支持 AHP 和其他自定义的多种算法
    release_model: 发布模型
    expose_the_model: 公开模型，还可以邀请伙伴们一起完善它
    add_dataset: 添加数据集
    add_metric: 添加度量指标
    my_models: 我的模型
    new_model: 新建模型
    versions: 版本
    default_display_version: 默认展示版本
    user_management: 用户管理
    model_name: 模型名称
    version_name: 版本名称
    selected_count: 已选 {{value}} 条
    search_dataset_placeholder: 搜索仓库
    search_metric_placeholder: 搜索指标
    commit_enter: 按 Enter 发送评论
    reply: 回复
    user:
      invite_users: 邀请用户
      input_email: 请输入被邀请者的邮箱，多个邮箱以逗号分隔
      send_email: 发送邀请邮件
      please_enter_the_correct_email_format: 请输入正确的邮箱格式
      multiple: 可多选
      browsable: 可浏览
      view_and_comment_the_report: 可查看和评论报告
      trigger_analysis: 可触发分析
      can_trigger_model_report_scan: 可触发模型报告扫描
      modifiable_model: 可修改模型
      can_modifiable_model_parameter: 可修改模型中的参数配置
      send_successful: 发送成功
      send_failed: 发送失败
      member: 用户
      owner: 拥有者
      join_at: 加入于
      member_to_be_added: 待加入用户
      waiting_for_confirmation_to_join: 邀请已发出，等候对方确认加入
      uninvite: 取消邀请
      confirm_cancel_invitation: 确认取消邀请
      confirm_delete: 确认删除
      quit: 退出
      confirm_quit: 确认退出
      quit_successful: 退出成功
    remaining_times_of_analysis_performed_this_week: '本周剩余分析次数: '
    view_report: 查看报告
    click_on_the_left_menu_and_select_a_category: 点击左侧菜单，选择分类
    cant_find_a_suitable_dataset: 找不到合适的数据集 ？
    cant_find_a_suitable_metric: 找不到合适的度量指标 ？
    ecological_dimension: 生态维度
    industry_options:
      is_it_applicable_to_general_industries_fields: 适用于一般行业/领域吗？
      'yes': 是的
      not: 不，这是一个特定行业的模型。
    is_public: 公开
    is_public_options:
      label: 是否公开
      public: 公开
      public_desc: 这是一个开放的评估模型，允许在Compass LAB主页上展示，供用户参与评估演进。
      non_public: 不公开
      non_public_desc: 这是一个保密的内部评估模型。我只想与我的协作团队成员一起进行评估和迭代。
    weight_threshold_settings:
      label: 权重和阈值设置
      metrics: 指标
      weight_percentage: 权重百分比
      threshold: 阈值
      between: 介于0-{{end}}之间
    algorithm_selection:
      label: 算法选择
      default: 系统默认算法
      default_desc: 我们模型使用的默认<s>算法</s>来自于<b>Rob Pike</b>, 这个算法最先被 openSSF <c>criticality
        score</c> 所使用（非常感谢 Rob 和 critiality score！）。基于时间序列和取值范围的考量，我们对这个算法在实现部分进行了改进。具体请参见<d>源代码</d>和<e>文章</e>。
      contact_us: 对模型算法有更多想法? 欢迎加入<s>官方 Slack 社区 </s>与我们一起讨论。
      metrics_value: 指标值
      metrics_threshold: 指标阈值
      metrics_weight: 指标权重
    trigger_analysis:
      card_btn: 触发分析
      title: 确认触发分析吗？
      retry_title: 确认重新分析吗？
      status: 上次触发状态：
      time: 上次触发时间：
      analyzing: 分析中...
      times_limit: 次数已用完
    analysis_status:
      tips: 报告还未生成：
      pending: 分析中...
      progress: 分析中...
      success: 成功
      unsumbit: 未触发
      error: 出错了
    threshold_range: 介于 0 - {{value}} 之间
    select_over_tips: 不能超过 10 条
    create: 创建
    edit: 编辑
    new_version: 创建版本
    create_failed: 创建失败
    create_succeed: 创建成功
    edit_failed: 更新失败
    edit_succeed: 更新成功
    joining_the_compass: 加入Compass 实验室
    agree_to_join: 同意加入
    i_have_understood_and_agreed_to_the: 我了解并同意
    experimental_model_terms_of_use: 实验模型使用条款
    please_check_the_terms: 请勾选使用条款
    you_are_here_because_you_have_been_invited: "<s>{{invitee}}</s> 邀请您加入 Compass
      实验室，以合作构建模型 <s>{{modelName}}</s>, 您同意加入吗？"
    form_tips:
      name_require: 请输入模型名称
      version_require: 请输入版本名称
      dataset_require: 请选择数据集
      metric_require: 请选择指标
    projects_selected: 已选中 {{count}} 个仓库
    no_comment_data: 暂无评论数据
  lab_metrics:
    contributor:
      title: 贡献者
      contributor_count: 贡献者数量
      contributor_count_desc: 过去 90 天中活跃的代码提交者、Pull Request 作者、代码审查者、Issue 作者和 Issue
        评论者的数量。
      contributor_count_value:
        threshold: 介于0-2000之间
      commit_contributor_count: 代码提交者数量
      commit_contributor_count_desc: 过去 90 天中活跃的代码提交者的数量。
      commit_contributor_count_value:
        threshold: 介于0-1000之间
      pr_authors_contributor_count: Pull Request 作者数量
      pr_authors_contributor_count_desc: 过去 90 天中活跃的Pull Request 作者的数量。
      pr_authors_contributor_count_value:
        threshold: 介于0-1000之间
      pr_review_contributor_count: 代码审查者数量
      pr_review_contributor_count_desc: 过去 90 天中活跃的代码审查者的数量。
      pr_review_contributor_count_value:
        threshold: 介于0-1000之间
      issue_authors_contributor_count: Issue 作者数量
      issue_authors_contributor_count_desc: 过去 90 天中活跃的Issue 作者的数量。
      issue_authors_contributor_count_value:
        threshold: 介于0-1000之间
      issue_comments_contributor_count: Issue 评论者数量
      issue_comments_contributor_count_desc: 过去 90 天中活跃的Issue 评论者的数量。
      issue_comments_contributor_count_value:
        threshold: 介于0-1000之间
      code_contributor_count: 代码参与者数量
      code_contributor_count_desc: 在过去 90 天内有多少活跃的代码提交者、代码审核者和 PR 提交者。
      code_contributor_count_value:
        threshold: 介于0-1000之间
      org_contributor_count: 组织贡献者数量
      org_contributor_count_desc: 过去90天内有组织附属关系的活跃的代码贡献者人数。
      org_contributor_count_value:
        threshold: 介于0-300之间
      bus_factor: Bus Factor
      bus_factor_desc: 过去 90 天内贡献占 50% 的最小人数。
      bus_factor_value:
        threshold: 介于0-5之间
    git:
      title: 代码
      commit_frequency: 代码提交频率
      commit_frequency_desc: 过去 90 天内平均每周代码提交次数。
      commit_frequency_value:
        threshold: 介于0-1000之间
      commit_frequency_more:
        weight: 25.81%
        threshold: '800'
        detail: 该项指标与贡献者数量类似，是从代码贡献数量来考察组织对社区的投入情况。
      is_maintained: 是否维护
      is_maintained_desc: 在过去 90 天内至少提交了一次代码的周百分比 (单仓场景)。在过去 30 天内至少有一次代码提交记录的的代码仓百分比
        (多仓场景)。
      is_maintained_value:
        threshold: 介于0-1之间
      is_maintained_more:
        weight: 13.853%
        threshold: 100%
        detail: 这个指标用来判断代码仓是否得到了持续的维护。积极维护的代码仓对漏洞等风险的抵御能力可能会更高些。它与代码提交频率有相关性，但关注重点不同。前者关注周期内代码贡献的数量，后者关注代码贡献的持续性。但是我们不应该对该项指标偏低的项目给出任何直接的结论，需要进一步洞察。
        notes: 单个仓库和多个仓库的定义是不同的。
      commit_pr_linked_ratio: 代码提交关联 PR 的比率
      commit_pr_linked_ratio_desc: 在过去90天内提交的代码链接PR的百分比。
      commit_pr_linked_ratio_value:
        threshold: 介于0-1之间
      commit_pr_linked_ratio_more:
        weight: 12.612%
        threshold: 100%
        detail: 这个指标用来考察是码提交是否经过了PR的审核流程。判断一个项目是否开源，可能我们通过查验它声明的License即可。但开源项目是否使用开放式的社区协作模式来开展开发工作，社区是否与开源贡献者、组织合作伙伴共建社区的意愿，仅仅靠License是不够的。这里我们通过代码提交是否通过PR，用公开、透明的方式，告知贡献者此次代码提交的目的，并接受评审，来考察项目的协作意愿程度。
      commit_count: 代码提交量
      commit_count_desc: 在过去90天内提交的代码次数。
      commit_pr_linked_count: 代码链接PR量
      commit_pr_linked_count_desc: 过去90天内提交的代码链接PR的次数。
      created_since: 创建于
      created_since_desc: 代码仓自创建以来存在了多长时间(月份)。
      created_since_value:
        threshold: 介于0-120之间
      updated_since: 更新于
      updated_since_desc: 每个代码仓自上次更新以来的平均时间(天)，即多久没更新了。
      updated_since_value:
        threshold: 介于0-0.25之间
      updated_since_more:
        weight: 12.74%
        threshold: 0.25 个月
        detail: 这个指标用来指代该项目的更新频率。它标识开发协作管理优秀的社区，会进行高频率的迭代式开发，以此来促进软件质量得到持续的改进。但是软件项目所属行业和领域不同，也决定了它的迭代频率并不是一味得越高越好，例如一些Linux发行版项目展现了非常典型的伴随版本规划的周期性的代码迭代规律。这里我们关注得是每个周期内该项目的趋势变化，以及与同类型项目相比较而得到的相对性结果。
      org_count: 组织数量
      org_count_desc: 过去90天内活跃的代码提交者所属组织的数目。
      org_count_value:
        threshold: 介于0-30之间
      org_count_more:
        weight: 32.258%
        threshold: '30'
        detail: 我们这里统计的是参与代码贡献的组织。之所有仅统计代码贡献，是因为代码贡献相较于其他类型社区贡献，它的技术门槛是最高的，同时也是组织参与社区贡献的最直接表现。同时通过分析组织的类别，也可以进行更深入的洞察，例如了解项目的南北向生态构建情况等。
      org_commit_frequency: 组织代码提交频率
      org_commit_frequency_desc: 过去90天内平均每周有组织归属的代码提交次数。
      org_commit_frequency_value:
        threshold: 介于0-800之间
      org_contribution_last: 组织持续贡献
      org_contribution_last_desc: 在过去90天所有组织向社区有代码贡献的累计时间（周）。
      org_contribution_last_value:
        threshold: 介于0-160之间
      lines_of_code_frequency: 代码变更行数
      lines_of_code_frequency_desc: 过去90天内平均每周提交的代码行数(增加行数加上删除行数)。
      lines_of_code_frequency_value:
        threshold: 介于0-300000之间
      lines_of_code_frequency_more:
        weight: 5.640%
        threshold: '300000'
        detail: 源代码行数与工作量确实是强相关的，但它与创造的价值相关性较差。另外什么形式的代码可以算入LOC，都是不确定因素。我们不关注代码形式，只用其描述工作量，其权重在整个度量模型较低。
      lines_add_of_code_frequency: 代码增加行数
      lines_add_of_code_frequency_desc: 确定在过去 90 天内平均每周提交的代码行数 (增加行数)
      lines_remove_of_code_frequency: 代码减少行数
      lines_remove_of_code_frequency_desc: 确定在过去 90 天内平均每周提交的代码行数 (删除行数)
    issue:
      title: Issue
      issue_first_reponse: Issue 首次响应时间
      issue_first_reponse_desc: 过去 90 天新建 Issue 首次响应时间的均值和中位数（天）。这不包括机器人响应、创建者自己的评论或
        Issue 的分配动作（action）。如果 Issue 一直未被响应，该 Issue 不被算入统计。
      bug_issue_open_time: Bug 类 Issue 处理时间
      bug_issue_open_time_desc: 过去 90 天新建的 Bug 类 Issue 处理时间的均值和中位数（天），包含已经关闭的 Issue
        以及未解决的 Issue。
      comment_frequency: Issue 评论频率
      comment_frequency_desc: 过去90天内新建 Issue 的评论平均数（不包含机器人和 Issue 作者本人评论）。
      updated_issues_count: 更新 Issue 数量
      updated_issues_count_desc: 过去90天 Issue 更新的数量。
      closed_issues_count: 关闭 Issue 数量
      closed_issues_count_desc: 过去90天关闭 Issue 的数量。
    pr:
      title: PR
      pr_issue_linked_ratio: PR 关联 Issue 的比率
      pr_issue_linked_ratio_desc: 过去90天内新建 PR 关联 Issue 的百分比。
      pr_issue_linked_ratio_value:
        threshold: 介于0-0.2之间
      pr_open_time: PR 处理时间
      pr_open_time_desc: 过去90天新建 PR 的处理时间的均值和中位数（天），包含已经关闭的PR以及未解决的 PR
      pr_open_time_value:
        threshold: 介于0-30之间
      code_review_count: 代码审查评论频率
      code_review_count_desc: 过去90天内新建 PR 的评论平均数量（不包含机器人和PR作者本人评论）。
      code_review_count_value:
        threshold: 介于0-8之间
      close_pr_count: 关闭 PR 数量
      close_pr_count_desc: 过去 90 天内合并和拒绝的 PR 数量。
      close_pr_count_value:
        threshold: 介于0-4500之间
      pr_time_to_first_response: PR首次响应时间
      pr_time_to_first_response_desc: 在过去 90 天内，从创建 PR 到首次收到人工回复的时间间隔。
      pr_time_to_first_response_value:
        threshold: 介于0-15之间
      change_request_closure_ratio: PR 闭环总比率
      change_request_closure_ratio_desc: 从开始到现在 PR 总数与关闭的 PR 数之间的比率。
      change_request_closure_ratio_value:
        threshold: 介于0-1之间
      change_request_closure_ratio_recently_period: PR 闭环比率
      change_request_closure_ratio_recently_period_desc: 过去 90 天内新建的 PR 总数与关闭的 PR
        数之间的比率。
      change_request_closure_ratio_recently_period_value:
        threshold: 介于0-1之间
      code_review_ratio: 代码审查比率
      code_review_ratio_desc: 过去90天内提交代码中，至少包含一名审核者(不是PR 创建者) 的百分比。
      code_review_ratio_value:
        threshold: 介于0-1之间
      code_merge_ratio: 代码合并比率
      code_merge_ratio_desc: 过去90天提交代码中，PR合并者和PR 作者不属于同一人的百分比。
      code_merge_ratio_value:
        threshold: 介于0-1之间
      pr_count: PR 数量
      pr_count_desc: 过去90天内创建的PR的数量。
      pr_count_with_review: 审查的PR数量
      pr_count_with_review_desc: 在过去90天内审查的PR数量。
      total_create_close_pr_count: 已接受或拒绝PR总数
      total_create_close_pr_count_desc: 从开始到现在创建的 PR 并且被接受或拒绝的数量。
      total_pr_count: PR总数
      total_pr_count_desc: 从开始到现在新建 PR 数量。
      create_close_pr_count: 已接受或拒绝PR数量
      create_close_pr_count_desc: 过去 90 天内创建的 PR 并且被接受或拒绝的数量。
      code_merge_count_with_non_author: PR合并数量(非PR作者合并)
      code_merge_count_with_non_author_desc: 过去 90 天内 PR 合并数量（不包含 PR 作者本人合并）。
      code_merge_count: PR合并数量
      code_merge_count_desc: 过去 90 天内 PR 合并数量。
      pr_issue_linked_count: PR关联Issue数量
      pr_issue_linked_count_desc: 过去90天内新建 PR 关联 Issue 的数量。
    repo:
      title: 仓库
      recent_releases_count: 最近版本发布次数
      recent_releases_count_desc: 过去12个月版本发布的数量。
      recent_releases_count_value:
        threshold: 介于0-12之间
  subjects:
    not_found: 未找到对应资源
  lab_models:
    datasets_required: 数据集不能为空
    metrics_required: 指标不能为空
    emails_required: 邮箱不能为空
    content_required: 内容不能为空
    invalid_name: 无效的名称
    invalid_dimension: 无效的维度
    invalid_dataset: 无效的数据集
    invalid_algorithm: 无效的算法
    invalid_version: 无效的版本
    invalid_invitation: 无效的邀请
    invitation_expired: 该邀请已过期
    already_memeber: 您已经是协作成员了
    datasets_too_large: 数据集超过了最大长度限制：%{limit}
    metrics_too_large: 指标集超过了最大长度限制：%{limit}
    not_found: 未找到对应资源
    forbidden: 没有访问权限
    create_failed: 创建失败，原因：%{reason}
    update_failed: 更新失败，原因：%{reason}
    delete_failed: 删除失败, 原因： %{reason}
    delete_success: 删除成功
    reaching_daily_limit: 已达成每天分析上限
    reach_limit: 参数超过最大上限
    members:
      expired: 邀请已过期
  metrics_models:
    dimensionality:
      topic:
        productivity: 生产力
        robustness: 稳健性
        niche_creation: 创新力
      type:
        collaboration: 协作
        contributor: 贡献者
        software: 软件
      productivity: 一个开源生态将投入转化为产出的能力。
      robustness: 生态系统面对内部或者外部冲突自我恢复的能力。
      niche_creation: 社区生态具有持续创造多样性创新的能力，并成为社区生态向前演进的动力。
      collaboration: 开源的本质是人类追求协作共赢的典范。
      contributor: 协作的关键是KOL(技术领袖)的能力。
      software: 开源软件制品具备的持续创新能力和使用价值。
    collaboration_development_index:
      title: 协作开发指数
      desc: 开源项目作为人类群体智能的典型表现，是否能够建立协作式的开发管理，是促成项目成功的关键要素。而代码，作为一个软件项目的最终输出件，是整个社区的核心内容。所以我们围绕一系列与代码贡献相关的间接指标，来评估开发流程管理，社区协作式开发做得如何。
      metrics:
        contributor_count: 代码参与者数量
        contributor_count_desc: 在过去 90 天内有多少活跃的代码提交者、代码审核者和 PR 提交者。
        contributor_count_more:
          weight: 19.987%
          threshold: '1000'
          detail: 这里我们重点关注的是与代码贡献直接相关的贡献者数量。作为这个模型的结果性指标，它标识开发协作管理优秀的社区，会聚集越来越多的活跃代码贡献者。我们相信部分Issue也与代码贡献相关，如漏洞类，Bug类，新需求等，最终都会引入代码贡献。但作为通用指标，它很难用统一的方式（如Bug类型）来甄别Issue在每个项目的具体类型，因为每个项目对Bug类型的定义和理解是不同的。
            所以我们做出了取舍，只选择PR相关和Code Commit相关的贡献者作为洞察对象。
        commit_frequency: 代码提交频率
        commit_frequency_desc: 过去90天内平均每周代码提交次数。
        commit_frequency_more:
          weight: 16.363%
          threshold: '1000'
          detail: 作为这个模型的结果性指标，它标识项目贡献的持续性和数量。指代项目的整体工作量大小。
        is_maintained: 是否维护
        is_maintained_desc: 过去90天内至少提交了一次代码的周百分比(单仓场景)。 在过去 30 天内至少有一次代码提交记录的的代码仓百分比(多仓场景)。
        is_maintained_more:
          weight: 13.853%
          threshold: 100%
          detail: 这个指标用来判断代码仓是否得到了持续的维护。积极维护的代码仓对漏洞等风险的抵御能力可能会更高些。它与代码提交频率有相关性，但关注重点不同。前者关注周期内代码贡献的数量，后者关注代码贡献的持续性。但是我们不应该对该项指标偏低的项目给出任何直接的结论，需要进一步洞察。
          notes: 单个仓库和多个仓库的定义是不同的。
        commit_pr_linked_ratio: 代码提交关联 PR 的比率
        commit_pr_linked_ratio_desc: 在过去90天内提交的代码链接PR的百分比。
        commit_pr_linked_ratio_more:
          weight: 12.612%
          threshold: 100%
          detail: 这个指标用来考察是码提交是否经过了PR的审核流程。判断一个项目是否开源，可能我们通过查验它声明的License即可。但开源项目是否使用开放式的社区协作模式来开展开发工作，社区是否与开源贡献者、组织合作伙伴共建社区的意愿，仅仅靠License是不够的。这里我们通过代码提交是否通过PR，用公开、透明的方式，告知贡献者此次代码提交的目的，并接受评审，来考察项目的协作意愿程度。
        pr_issue_linked_ratio: PR 关联 Issue 的比率
        pr_issue_linked_ratio_desc: 过去90天内新建 PR 关联 Issue 的百分比。
        pr_issue_linked_ratio_more:
          weight: 11.319%
          threshold: 100%
          detail: 该指标是用来观察代码贡献是否都经过了开放的讨论，例如使用Issue的形式。需要注意的是，并不是所有Issue都会产生代码贡献，例如咨询类的Issue，一般就不会产生代码修改。同时，我们也要注意到PR是否经历公开讨论，Issue并不是唯一途径，可能来自于论坛的讨论。所以我们不能一味的追寻该指标的高比例。
        code_review_ratio: 代码审查比率
        code_review_ratio_desc: 过去90天内提交代码中，至少包含一名审核者(不是PR 创建者) 的百分比。
        code_review_ratio_more:
          weight: 10.113%
          threshold: 100%
          detail: 如果一个PR没有经过其他人review，就被合入，就会导致代码缺陷或者漏洞被有意或者无意的引入的概率大大提高。代码审查虽然不能全面防范这种风险，但大大改善风险的引入。
        code_merge_ratio: 代码合并比率
        code_merge_ratio_desc: 过去90天提交代码中，PR合并者和PR 作者不属于同一人的百分比。
        code_merge_ratio_more:
          weight: 10.113%
          threshold: 100%
          detail: 该指标是与代码审查比率配套观察的指标。当我们引入第三方review，但如果PR的建立者故意或者无意忽略了第三方给出的评审意见，自行合入了代码，风险同样存在。
            需要注意的是，代码审查比率和代码合并比率是我们观察到的业界最佳实践，而不是唯一标准，我们同样看到一些社区基于对一些优秀、长期贡献者的信任，授予了这些人自建代码合入的权力。
        lines_of_code_frequency: 代码行数
        lines_of_code_frequency_desc: 过去90天内平均每周提交的代码行数(增加行数加上删除行数)。
        lines_of_code_frequency_more:
          weight: 5.640%
          threshold: '300000'
          detail: 源代码行数与工作量确实是强相关的，但它与创造的价值相关性较差。另外什么形式的代码可以算入LOC，都是不确定因素。我们不关注代码形式，只用其描述工作量，其权重在整个度量模型较低。
    community_service_and_support:
      title: 社区服务与支撑
      desc: 该模型用于评估开发者在贡献过程中，直接感知到的社区提供的服务和支撑做得如何。之所以强调直接感知，是因为社区提供的许多底层服务，例如开发涉及的Devops基础设施同样是构建社区服务的关键元素，但社区参与者很难有直观感受，同时缺乏通识性的评估手段。我们使用在社区式开发中，参与者所能感知到的指标维度，来间接性的评估社区整个“开源贡献马拉松的后勤保障系统”。需要注意的是，这并不意味着只做到模型中提及的指标就足够了，模型为了保证指标间的独立性，做了强相关性指标降维处理；所以如果想长期保持该项模型的长期积极发展，社区付出的努力要远远超过当前指标包含的内容。
      metrics:
        updated_issues_count: 更新 Issue 数量
        updated_issues_count_desc: 过去90天 Issue 更新的数量。
        updated_issues_count_more:
          weight: 19.721%
          threshold: '2000'
          detail: 有两个原因促使我们选择使用Issue更新的数量而不是统计关闭或者解决Issue的数量。首先，Issue有很多不同的类型，比如bug、功能需求、用户咨询和CVEs。只有特定类型的问题必须很快得到解决，比如CVEs。对于其余类型的问题,
            并不追求Issue的快速解决，我们需要与问题创建者进行多次沟通，以更好地了解详细信息。如果是功能需求，从接受到解决，是按照发布计划进行的，这类场景可能也需要几个月的时间。其次，从Issue更新的数量来看，我们可以监控Issue处理的活跃度。问题更新还可以包括重开问题，表明对问题理解的变化的关注度。
        close_pr_count: 关闭 PR 数量
        close_pr_count_desc: 过去 90 天内合并和拒绝的 PR 数量。
        close_pr_count_more:
          weight: 19.721%
          threshold: '4500'
          detail: 代码贡献越多，需要关闭(接受或拒绝)的PR请求就越多。这表明社区正在积极地处理PR请求。我们将关闭 PR 数量 与 更新 Issue
            数量 作为该模型的结果性指标，用来总体观察社区服务与支撑力度。
        issue_first_response: Issue 首次响应时间
        issue_first_response_desc: 过去 90 天新建 Issue 首次响应时间的均值和中位数（天）。这不包括机器人响应、创建者自己的评论或
          Issue 的分配动作（action）。如果 Issue 一直未被响应，该 Issue 不被算入统计。
        issue_first_response_more:
          weight: 14.372%
          threshold: 15 天
          detail: 我们用这项指标来感知“社区温度”，对于加入社区的贡献者来说，他的提问如果能得到社区的及时回复，将会很大几率留存并持续贡献社区(依据Mozilla研究报告)。
            同时我们发现近年来越来越多的机器人被用来辅助Issue处理，所以我们排除了机器人的干扰，专注人的回复。
        bug_issue_open_time: Bug 类 Issue 处理时间
        bug_issue_open_time_desc: 过去 90 天新建的 Bug 类 Issue 处理时间的均值和中位数（天），包含已经关闭的 Issue
          以及未解决的 Issue。
        bug_issue_open_time_more:
          weight: 12.88%
          threshold: 60 天
          notes: 标记为 Bug 类的 Issue。
          detail: Bug类Issue代表了社区对需要快速解决的Issue的处理效率。我们选择使用Bug类型的Issue来代表这类Issue，当然也具有一定的局限性，因为并不是所有Bug都是高优先级处理的Bug，但相比于不区分issue类型，
            该指标具备一定代表性。
        pr_open_time: PR 处理时间
        pr_open_time_desc: 过去90天新建 PR 的处理时间的均值和中位数（天），包含已经关闭的PR以及未解决的 PR
        pr_open_time_more:
          weight: 12.88%
          threshold: 30 天
          detail: 我们追求PR的快速关闭，包括代码合并或拒绝。否则，解决PR请求所需的时间越长，发生合并冲突的风险就越大，而依赖于这个PR代码的其他代码提交请求也将堆积。
        comment_frequency: Issue 评论频率
        comment_frequency_desc: 过去90天内新建 Issue 的评论平均数（不包含机器人和 Issue 作者本人评论）。
        comment_frequency_more:
          weight: 10.217%
          threshold: '5'
          detail: 我们希望看到社区鼓励参与者围绕具体的Bug或者需求，通过Issue的方式进行公开和透明的讨论。这样Issue的相应结论也可以做为知识储备积累下来，同时为更多人所能看到。
        code_review_count: 代码审查评论频率
        code_review_count_desc: 过去 90 天内新建 PR 的评论平均数量（不包含机器人和 PR 作者本人评论）。
        code_review_count_more:
          weight: 10.217%
          threshold: '8'
          detail: 我们希望代码审查能够通过PR review的方式展示出来，让大家看到社区对于代码质量，安全方面管理的重视程度，同时为新人快速成长提供帮助。
    community_activity:
      title: 活跃度
      desc: 活跃度用来描述一个开源社区或者项目的活跃程度。为了使一个开源项目持续发展，必须在首次发布后进行持续的维护和改进。活跃度展示了一个项目随着时间的推移持续展开的工作有多少。高活跃度的社区可能表明该项目是可持续的，低活跃度的社区可能表明该项目面临风险。
      metrics:
        contributor_count: 贡献者数量
        contributor_count_desc: 过去 90 天中活跃的代码提交者、Pull Request 作者、代码审查者、Issue 作者和 Issue
          评论者的数量。
        contributor_count_more:
          weight: 18.01%
          threshold: '2000'
          notes: 当一个人在多个仓库中有多个不同角色的贡献时，例如代码提交者和 Issue 作者，我们只算一次。
          detail: 在这个模型，我们把代码托管平台对于该项目的所有类型的贡献者全部囊括在内。因为我们认为项目的活跃度是由所有类型的贡献行为构成的，而且活跃贡献者数量越多，越表明项目的重要程度越高。
        commit_frequency: 代码提交频率
        commit_frequency_desc: 过去90天内平均每周代码提交次数。
        commit_frequency_more:
          weight: 18.01%
          threshold: '1000'
          detail: 作为这个模型的结果性指标，它标识项目贡献的持续性和数量。指代项目的整体工作量大小。
        updated_since: 更新于
        updated_since_desc: 每个代码仓自上次更新以来的平均时间(天)，即多久没更新了。
        updated_since_more:
          weight: 12.74%
          threshold: 0.25 个月
          detail: 这个指标用来指代该项目的更新频率。它标识开发协作管理优秀的社区，会进行高频率的迭代式开发，以此来促进软件质量得到持续的改进。但是软件项目所属行业和领域不同，也决定了它的迭代频率并不是一味得越高越好，例如一些Linux发行版项目展现了非常典型的伴随版本规划的周期性的代码迭代规律。这里我们关注得是每个周期内该项目的趋势变化，以及与同类型项目相比较而得到的相对性结果。
        organization_count: 组织数量
        organization_count_desc: 过去90天内活跃的代码提交者所属组织的数目
        organization_count_more:
          weight: 11.50%
          threshold: '10'
          detail: 越多的组织参与项目的持续贡献，代表越多的组织深度依赖这个项目。这样会极大几率促使生态的建立和繁荣。
        created_since: 创建于
        created_since_desc: 代码仓自创建以来存在了多长时间(月份)。
        comment_frequency: Issue 评论频率
        comment_frequency_desc: 过去90天内新建 Issue 的评论平均数（不包含机器人和 Issue 作者本人评论）。
        comment_frequency_more:
          weight: 7.77%
          threshold: '5'
          detail: 我们希望看到社区鼓励参与者围绕具体的Bug或者需求，通过Issue的方式进行公开和透明的讨论。这样Issue的相应结论也可以做为知识储备积累下来，同时为更多人所能看到。
        code_review_count: 代码审查评论频率
        code_review_count_desc: 过去90天内新建 PR 的评论平均数量（不包含机器人和PR作者本人评论）。
        code_review_count_more:
          weight: 4.92%
          threshold: '8'
          detail: 我们希望代码审查能够通过PR review的方式展示出来，让大家看到社区对于代码质量，安全方面管理的重视程度，同时为新人快速成长提供帮助。
        updated_issues_count: 更新 Issue 数量
        updated_issues_count_desc: 过去90天 Issue 更新的数量。
        updated_issues_count_more:
          weight: 4.92%
          threshold: '2500'
          detail: 有两个原因促使我们选择使用Issue更新的数量而不是统计关闭或者解决Issue的数量。首先，Issue有很多不同的类型，比如bug、功能需求、用户咨询和CVEs。只有特定类型的问题必须很快得到解决，比如CVEs。对于其余类型的问题,
            并不追求Issue的快速解决，我们需要与问题创建者进行多次沟通，以更好地了解详细信息。如果是功能需求，从接受到解决，是按照发布计划进行的，这类场景可能也需要几个月的时间。其次，从Issue更新的数量来看，我们可以监控Issue处理的活跃度。问题更新还可以包括重开问题，表明对问题理解的变化的关注度。
        recent_releases_count: 最近版本发布次数
        recent_releases_count_desc: 过去12个月版本发布的数量。
        recent_releases_count_more:
          weight: 3.18%
          threshold: '12'
          detail: 高频率的版本发布，表明软件制品在快速迭代，来相应用户的需求。当然软件项目所属行业和领域不同，也决定了它的迭代频率并不是一味得越高越好，例如大型平台类软件项目的发布周期是半年到一年。
    organization_activity:
      title: 组织活跃度
      desc: 该模型用于评估社区中组织（商业公司、高校等）的活跃程度。对于一个开源项目，尤其是对于平台型软件项目，越多的组织参与到社区贡献，表明社区的生态构建是朝向繁荣方向发展的。因为只有软件项目能够提供组织所需要的商业价值或者学术价值绑定，相关组织才愿意以组织身份参与社区贡献。
      metrics:
        org_count: 组织数量
        org_count_desc: 过去90天内活跃的代码提交者所属组织的数目。
        org_count_more:
          weight: 32.258%
          threshold: '30'
          detail: 我们这里统计的是参与代码贡献的组织。之所有仅统计代码贡献，是因为代码贡献相较于其他类型社区贡献，它的技术门槛是最高的，同时也是组织参与社区贡献的最直接表现。同时通过分析组织的类别，也可以进行更深入的洞察，例如了解项目的南北向生态构建情况等。
        contributor_count: 组织贡献者数量
        contributor_count_desc: 过去90天内有组织附属关系的活跃的代码贡献者人数。
        contributor_count_more:
          weight: 25.806%
          threshold: '300'
          detail: 我们这里统计的是有组织属性的代码贡献者数量。我们这里主要考察组织对社区人力资源的持续投入。
        commit_frequency: 代码提交频率
        commit_frequency_desc: 过去90天内平均每周有组织归属的代码提交次数。
        commit_frequency_more:
          weight: 25.81%
          threshold: '800'
          detail: 该项指标与贡献者数量类似，是从代码贡献数量来考察组织对社区的投入情况。
        contribution_last: 持续贡献
        contribution_last_desc: 在过去90天所有组织向社区有代码贡献的累计时间（周）。
        contribution_last_more:
          weight: 16.13%
          threshold: '200'
          detail: 我们通过时间维度来了解，随着时间迁移，组织参与和投入的情况，来考察生态的发展情况。
    contributor_milestone_persona:
      title: 贡献者里程画像
      desc: 贡献者可能基于上下游生态利益或个人发展等原因与开源项目产生共鸣，并进入社区参与贡献。他们可能长期留在社区，逐渐淡出，甚至再次被唤醒。基于这些情况，我们定义了贡献者在社区中的多种状态，构成了里程画像。这个模型受到状态机的启发，每个状态之间可以相互迁移，而贡献者同时只能处于一种状态。这样做可以确保行为的解耦，更有利于观察贡献者在社区中的行为。
      metrics:
        activity_casual_contributor_count: 访客贡献者数量
        activity_casual_contributor_count_desc: 在过去90天内有多少活跃的访客贡献者数量
        activity_casual_contributor_count_more:
          weight: 8%
          threshold: '2000'
          detail: ''
        activity_casual_contribution_per_person: 访客贡献次数
        activity_casual_contribution_per_person_desc: 在过去90天内活跃访客贡献者的人均贡献次数。
        activity_casual_contribution_per_person_more:
          weight: 8%
          threshold: '2000'
          detail: ''
        activity_regular_contributor_count: 常客贡献者数量
        activity_regular_contributor_count_desc: 在过去90天内有多少活跃的常客贡献者数量。
        activity_regular_contributor_count_more:
          weight: 12%
          threshold: '100'
          detail: ''
        activity_regular_contribution_per_person: 常客贡献次数
        activity_regular_contribution_per_person_desc: 在过去90天内活跃常客贡献者的人均贡献次数。
        activity_regular_contribution_per_person_more:
          weight: 18%
          threshold: '25'
          detail: ''
        activity_core_contributor_count: 核心贡献者数量
        activity_core_contributor_count_desc: 在过去90天内有多少活跃的核心贡献者数量。
        activity_core_contributor_count_more:
          weight: 20%
          threshold: '20'
          detail: ''
        activity_core_contribution_per_person: 核心贡献次数
        activity_core_contribution_per_person_desc: 在过去90天内活跃核心贡献者的人均贡献次数。
        activity_core_contribution_per_person_more:
          weight: 30%
          threshold: '200'
          detail: ''
    contributor_role_persona:
      title: 贡献者角色画像
      desc: 开源项目的发起通常是由一个团队或者个人，以个人身份或者组织身份发起创立，在演进过程中不断吸纳新的个人或者组织参与贡献。 不论是初创者，还是后来加入者，通过与社区建立双赢的合作，以及突出、持续的贡献，获得了社区管理者的角色，这个角色通常可以通过行使一些在代码托管平台的管理行为，得以展现。我们也是通过这类事件行为来确认贡献者是否拥有管理者角色。
        而没有被觉察到管理行为的贡献者，我们称之为参与者。 我们使用管理者这一术语来描述社区中拥有管理权限的贡献者。通常情况下，他们也是项目的技术领导者。然而，技术领导者并不能完全等同于管理行为，所以我们采用管理者这个更加具体的称谓。
        判断贡献者是否为管理者的标准是其是否做出了Issue管理类贡献或Code管理类贡献。当然，一个贡献者可能在最初参与社区贡献时并不是管理者，因此我们引入了时间戳来标记这一身份的变化。在上述两类贡献中，如果贡献者声明了自己的组织身份，例如通过公开的组织邮箱直接强制提交代码，我们称其为组织管理者；反之称其为个人管理者。
      metrics:
        activity_organization_contributor_count: 组织贡献者数量
        activity_organization_contributor_count_desc: 在过去90天内有多少活跃的组织贡献者数量。
        activity_organization_contributor_count_more:
          weight: 20%
          threshold: '1500'
          detail: ''
        activity_organization_contribution_per_person: 组织贡献次数
        activity_organization_contribution_per_person_desc: 在过去90天内活跃组织贡献者的人均贡献次数。
        activity_organization_contribution_per_person_more:
          weight: 30%
          threshold: '10'
          detail: ''
        activity_individual_contributor_count: 个人贡献者数量
        activity_individual_contributor_count_desc: 在过去90天内有多少活跃的个人贡献者数量。
        activity_individual_contributor_count_more:
          weight: 20%
          threshold: '3500'
          detail: ''
        activity_individual_contribution_per_person: 个人贡献次数
        activity_individual_contribution_per_person_desc: 在过去90天内活跃个人贡献者的人均贡献次数。
        activity_individual_contribution_per_person_more:
          weight: 30%
          threshold: '5'
          detail: ''
    contributor_domain_persona:
      title: 贡献者领域画像
      desc: 在领域画像模型中，我们首先将贡献者为社区做出的贡献按领域或类型进行划分。我们力争将贡献领域划分得更加原子化，以与我们当前的工程能力相匹配。然而，这个划分过程是一个持续演进的过程，随着我们工程能力的提升，我们将能够实现更细粒度的领域划分。对于观察类贡献、Issue类贡献和Code类贡献，我们可以利用代码托管平台（如GitHub、Gitee等）提供的数据来获得洞察。对于其他几类贡献，由于社区使用方式和程度的差异，我们目前只能提供有限的数据源作为参考。然而，随着我们工程能力逐步提升，我们可能会提供更多解决方案。
      metrics:
        activity_observation_contributor_count: 观察者数量
        activity_observation_contributor_count_desc: 在过去90天内有多少活跃的star，fork观察者。
        activity_observation_contributor_count_more:
          weight: 8%
          threshold: '2000'
          detail: ''
        activity_observation_contribution_per_person: 观察者贡献次数
        activity_observation_contribution_per_person_desc: 在过去90天内活跃star，fork观察者的人均贡献次数。
        activity_observation_contribution_per_person_more:
          weight: 12%
          threshold: '2'
          detail: ''
        activity_code_contributor_count: 代码贡献者数量
        activity_code_contributor_count_desc: 在过去90天内有多少活跃的代码类贡献者。
        activity_code_contributor_count_more:
          weight: 16%
          threshold: '500'
          detail: ''
        activity_code_contribution_per_person: 代码贡献次数
        activity_code_contribution_per_person_desc: 在过去90天内活跃代码类贡献者的人均贡献次数。
        activity_code_contribution_per_person_more:
          weight: 24%
          threshold: '15'
          detail: ''
        activity_issue_contributor_count: Issue贡献者数量
        activity_issue_contributor_count_desc: 在过去90天内有多少活跃的Issue类贡献者。
        activity_issue_contributor_count_more:
          weight: 16%
          threshold: '1000'
          detail: ''
        activity_issue_contribution_per_person: Issue贡献次数
        activity_issue_contribution_per_person_desc: 在过去90天内活跃Issue类贡献者的人均贡献次数。
        activity_issue_contribution_per_person_more:
          weight: 24%
          threshold: '10'
          detail: ''
    contributor_route:
      title: 贡献者旅程
    contributor_reputation:
      title: 贡献者口碑
    user_reputation:
      title: 用户口碑
    developer_attraction:
      title: 开发者吸引
    organizations_activity:
      title: 组织活跃度
    technological_advancement:
      title: 技术先进性
    code_security_guarantee:
      title: 代码安全保障
    code_compliance_guarantee:
      title: 代码合规保障
    content:
      title: 文档
    activity:
      title: 活跃度
    developer_convertion:
      title: 开发者转换
    developer_retention:
      title: 开发者留存
    inner_connectedness:
      title: 内部联接
    organization_collaboration_relationships:
      title: 组织协作关系
    outbound_connectedness:
      title: 外部联接
    starter_project_health:
      title: Starter Project Health
      desc: Starter Project Health is designed to help people get started with four
        key project health metrics that they can expand on and customize to meet their
        unique needs later.
      metrics:
        time_to_first_response: PR Time to First Response
        time_to_first_response_desc: Determine the amount of time between when a PR
          was created and when it received the first response from a human in the
          past 90 days.
        change_request_closure_ratio_all_period: Change Request Closure Ratio
        change_request_closure_ratio_all_period_desc: Measures the ratio between the
          total number of open change requests and the total number of closed change
          requests from the beginning to now.
        change_request_closure_ratio_same_period: Change Request Closure Ratio Recently
          Period
        change_request_closure_ratio_same_period_desc: Measures the ratio between
          the total number of open change requests and the total number of closed
          change requests in the last 90 days.
        pr_time_to_close: PR Time To Close
        pr_time_to_close_desc: Determine the amount of time between when a PR was
          created and when it was closed in the past 90 days.
        bus_factor: Bus Factor
        bus_factor_desc: Determine the smallest number of people that make 50% of
          contributions in the past 90 days.
        release_frequency: Release Frequency
        release_frequency_desc: Determine the frequency of project releases (including
          point releases with bug fixes) in the last year.
  notification:
    slack:
      subscription_update_content: |-
        ## OSS Compass 项目订阅更新 - %{subject_name}

        Hi %{user_name},

        你在 OSS Compass 上订阅的项目报告近期有 1 项更新，具体如下：

        - [%{subject_name}](%{subject_url})

        点击上方链接可查阅更新后报告内容，如需管理 OSS Compass 项目订阅，[请点击此处](%{subscription_url})。
        更多开源软件项目分析洞察请访问： [OSS Compass](%{explore_url})。

        [OSS Compass 团队](%{about_url})
      submission_content: |-
        ## OSS Compass 项目订阅

        Hi %{user_name},

        你在 OSS Compass 网站上有关 [%{subject_name}](%{subject_url}) 的分析请求已提交并订阅，我们将在确认并完成分析后与你同步相关的报告信息。

        如需管理 OSS Compass 项目订阅，[请点击此处](%{subscription_url})。
        更多开源软件项目分析洞察请访问： [OSS Compass](%{explore_url})。

        [OSS Compass 团队](%{about_url})
      subscription_create_content: |-
        ## OSS Compass 项目订阅

        Hi %{user_name},

        你已成功订阅项目 [%{subject_name}](%{subject_url}) 的分析报告，我们将在项目报告更新时与你同步相关的报告信息。

        如需管理 OSS Compass 项目订阅，[请点击此处](%{subscription_url})。
        更多开源软件项目分析洞察请访问： [OSS Compass](%{explore_url})。

        [OSS Compass 团队](%{about_url})
      subscription_delete_content: |-
        ## OSS Compass 项目退订

        Hi %{user_name},

        你已成功退订项目 [%{subject_name}](%{subject_url}) 的分析报告。

        如需管理 OSS Compass 项目订阅，[请点击此处](%{subscription_url})。
        更多开源软件项目分析洞察请访问： [OSS Compass](%{explore_url})。

        [OSS Compass 团队](%{about_url})
    email:
      project_subscription_update: OSS Compass 项目订阅更新
      project_subscription: OSS Compass 项目订阅
      project_unsubscription: OSS Compass 项目退订
      please_click_here: 请点击此处
      project_update: 你在 OSS Compass 上订阅的项目报告近期有 1 项更新，具体如下：
      project_update_description: 点击上方链接可查阅更新后报告内容，如需管理 OSS Compass 项目订阅，
      more_info: 更多开源软件项目分析洞察请访问：
      team: 团队
      submission_description: 你在 OSS Compass 网站上有关 <a href='%{subject_url}'>%{subject_name}</a>
        的分析请求已提交并订阅，我们将在确认并完成分析后与你同步相关的报告信息。
      manage_subscription: 如需管理 OSS Compass 项目订阅，<a href='%{subscription_url}'>请点击此处</a>.。
      subscription_create_description: 你已成功订阅项目 <a href='%{subject_url}'> %{subject_name}</a>
        的分析报告，我们将在项目报告更新时与你同步相关的报告信息。
      subscription_delete_description: 你已成功退订项目 <a href='%{subject_url}'> %{subject_name}</a>
        的分析报告。
  oauth:
    user:
      missing: 授权信息已经过期或未登录，请重新登录授权
      failed: 获取用户信息失败，原因：%{reason}
    branch:
      failed: 创建分支失败，原因：%{reason}
    validate:
      fork: 暂不支持fork仓库的分析，请提交上游仓库
      retry: 仓库有效性检测失败，请重试
    file:
      failed: 更新文件失败，原因：%{reason}
      submitted: 文件已经提交过了
    pull:
      failed: 创建PR失败，原因：%{reason}
    latest_sha:
      failed: 获取最新提交信息失败，原因：%{reason}
  pull:
    too_many_repositories: 提交的仓库数量过多，请手动创建PR
    welcome_collection: 欢迎提交 Collection 变更，在PR审查合并后，新的 Collection 信息会在下一个周期自动更新展示
    invalid_level: 无效的资源类型
    duplicate: 分析报告已存在，请访问以下地址查看
    user:
      validation:
        pass: 提交者校验成功
        failed: 提交者校验失败
      invalid: 获取提交用户信息失败
  setting:
    profile:
      avatar: 头像
      userinfo: 用户信息
      account_setting: 账号设置
      form:
        name: 昵称
        name_placeholder: 请输入昵称
        email: 邮箱
        email_ques_icon: 该电子邮件用于接收项目更新通知
        email_placeholder: 请输入邮箱地址
        error_require: "{{field}}不能为空"
        error_name_max_len: 昵称长度不能超过{{length}}
        error_email_format: 邮件格式不正确
      connected_accounts: 第三方绑定
      bound_already: 已绑定
      wechat_connect: 绑定
      connect: 绑定
      disconnect: 解绑
      connect_multiple_accounts_to_your_user_and_sign_in: 绑定第三方账号，即可使用任何一个账户进行登录。
      delete_account: 删除账号
      delete_account_btn: 删除我的账号
      delete_account_warning: 删除账户后，无法进行撤销，在执行此操作时，请确保您已经仔细考虑过。
      can_be_used_to_submit_project_after_binding: 绑定后可用于提交项目
      can_be_used_to_receive_notifications_for_analysis_reports: 可用于接收分析报告的通知
      verified: 已验证
      unverified_yet: 未验证，
      email_sent: 验证邮件已发送，
      email_sent_later: "{{sec}} 秒后可再次发送"
      resend_verification_email: 发送验证邮件
      language_preferences: 通知语言偏好
      language_preferences_desc: 用于接收通知使用的语言选项，包含邮件通知和Slack 通知
    subscriptions:
      title: 我的订阅
      submit_a_project: 提交项目
      unsubscribe: 取消订阅
      empty_list: 暂无订阅数据
      updated_on: '更新于 '
      collect_at: 最后一次数据更新时间
      complete_at: 分析报告更新时间
      analyzing: 分析中
      confirm_cancel: 取消订阅
      after_unsubscribing_you_will_no_longer_receive_any: 取消订阅后，你将不会收到关于该项目的相关通知
  submit_project:
    enroll_your_project: 登记项目
    please_select_the_platform_where_your_project_is_h: 请选择代码托管平台
    sign_in_with_github: 使用 GitHub 登录
    sign_in_with_gitee: 使用 Gitee 登录
    submit_your_project: 提交项目
    single_repository: 单个代码仓
    your_project_hosting_on: 您的项目托管在
    switch_gitee: 使用 Gitee
    switch_github: 使用 GitHub
    logout: 注销
    select_your_own_repository_on: 在{{providerName}}选择你的仓库
    type_the_address_of_any_repository: 输入代码仓地址
    pick_your_own_repository_on: 点击选择仓库
    type_address_of: 请输入代码仓库地址
    please_enter_a_valid: 请输入一个有效的{{provider}}仓库链接
    eg: 例如
    submit: 提交
    select_repository: 请选择代码仓库
    please_choose_owner_and_pick_your_repository: 请选择所有者并选择代码仓库
    add_organization: 添加一个组织
    grant_organization_access: 授予组织访问权限
    search: 搜索中...
    no_result: 没有数据!
    fetching: 获取中...
    failed_to_fetch_data: 获取数据失败 !
    load_more: 载入更多
    no_more_data: 没有更多数据 !
    pick_it: 选择
    error: 错误!
    run_for_a_community_with_multiple_repositories: 作为拥有多个代码仓的社区提交?
    submit_as_community: 作为社区提交
    please_note_that_when_submitted_as_a_community: 请注意，当作为一个社区提交时，所有的分析维度都将来自社区标准，这与单个代码库的标准不同.
    community_name: 社区名称
    community: 社区
    software_artifact_repository: 软件制品仓库
    select_or_type: 选择或者手动输入
    governance_repository: 治理仓库
    optional: 可选的
    add_repository: 添加代码仓
    input_any_repository_address: Input any {{providerName}} repository address
    run_for_a_single_repository: 作为单个代码仓库提交?
    submit_a_single_repository: 作为单仓提交
    please_note_that_when_submitted_as_single_repository: 请注意，当作为单个存储库提交时，所有分析维度都将来自单个存储库标准，这与社区标准不同.
    manually_enter_repository_url: 手动输入
    choose_a_repository: 从 {{providerName}} 中选择
    submit_success: 提交成功！
    welcome_to: 欢迎来到 OSS Compass
    continue_with_github: 使用 GitHub 登录
    continue_with_gitee: 使用 Gitee 登录
    by_creating_an_account: 要创建一个帐户，您同意
    as_well_as: 以及
    terms_of_use: 使用条款
    privacy_policy: 隐私协议
    email_verification_successful: 邮件验证成功
    the_email_address: 已成功将邮箱地址
    has_been_successfully: 与您的 OSS Compass 帐户绑定
    account_setting: 账号设置
    bind_other_code_hosting_platforms: 绑定其它代码托管平台？
    community_home_page: 社区主页
    community_avatar: 社区头像
  user_mailer:
    email_verification:
      subject: 验证您的电子邮件地址
    email_invitation:
      subject: 邀请加入实验室模型
      body: 很高兴能邀请您加入 「%{model_name}」 模型项目。我们正在寻找充满热情并愿意贡献时间和技能的合作伙伴，我们相信您的专业知识将是该项目的宝贵资产。如果您有兴趣加入该项目，请点击以下链接：
      accept: 接受邀请
    confirm_email:
      subject: 确认您的邮箱地址
      verify_email: 验证您的电子邮件地址
      verify_email_text: 请点击下面的按钮来验证您的电子邮件地址。 这是确认电子邮件地址所有权所必需的。
      browser_text: '如果这不起作用，请尝试复制并粘贴以下链接到浏览器中:'
      expire_text: 此链接仅在3天内有效。如果它已经过期，请登录您的
      expire_text_2: 此链接仅在3天内有效。如果它已经过期, 请联系发送者重新发送邀请。
      account_setting: 账户设置
      expire_text_end: 请求一个新的链接。
  users:
    login_failed: 登录失败，原因：%{reason}
    forbidden: 访问受限
    no_permission: 没有权限
    require_login: 需要登录后操作
    require_bind: 当前用户没有绑定 %{provider} 账号
    already_banned: "%{provider}: %{nickname} 已经绑定其他账号"
    email_verified: 邮箱已经验证通过
    email_change_limit: 邮箱24小时内修改不可以超过 %{count} 次
    send_email_limit: 邮箱验证24小时内发送不可以超过 %{count} 次
    send_invite_limit: 邀请邮件24小时内发送不可以超过 %{count} 次
    keep_one_login_bind: 至少保留一个登录绑定
    no_such_login_bind: 未绑定相关平台帐号
    wechat_already_bind: 已经绑定了一个微信
    provider_not_supported: 第三方应用登录目前仅支持 github，gitee
    subscription_already_exist: 已经订阅了
    subject_not_exist: 操作对象不存在
    subscription_not_exist: 订阅不存在
  subject_sig:
    invalid_name: 无效名称
  yaml:
    path:
      invalid: '无效的YAML文件路径: %{path}'
    diff_url:
      invalid: 无效的Diff链接地址
